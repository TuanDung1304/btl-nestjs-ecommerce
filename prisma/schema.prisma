generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  address           String?
  avatar            String?
  birthday          DateTime?
  role              Role               @default(User)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  hashRt            String?
  isActive          Boolean            @default(true)
  cartItems         CartItem[]
  orders            Order[]
  userNotifications UserNotification[]
  lastSeen          UserSeen[]

  @@map("users")
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  categoryId       String
  price            Float
  thumbnail        String
  discountedPrice  Float?
  productModels    ProductModel[]
  images           Images[]
  category         Category           @relation(fields: [categoryId], references: [id])
  views            Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Notification     Notification[]
  UserNotification UserNotification[]

  @@map("products")
}

model ProductModel {
  id        Int        @id @default(autoincrement())
  productId Int
  color     String
  size      String
  quantity  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  product   Product    @relation(fields: [productId], references: [id])
  cartItems CartItem[]

  @@map("product_models")
}

model Category {
  id        String    @id //ao-vest
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      String
  products  Product[]

  @@map("categories")
}

model Images {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@map("images")
}

model CartItem {
  id             Int          @id @default(autoincrement())
  userId         Int
  productModelId Int
  orderId        Int?
  user           User         @relation(fields: [userId], references: [id])
  order          Order?       @relation(fields: [orderId], references: [id])
  productModel   ProductModel @relation(fields: [productModelId], references: [id])
  quantity       Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("cart_items")
}

enum OrderStatus {
  Pending
  Delivering
  Completed
  Cancelled
}

model Order {
  id            Int         @id @default(autoincrement())
  cartItems     CartItem[]
  status        OrderStatus @default(Pending)
  address       String
  province      String
  district      String
  shipmentPrice Float
  totalPrice    Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  voucherId     Int?
  voucher       Voucher?    @relation(fields: [voucherId], references: [id])
  note          String?

  @@map("orders")
}

model Voucher {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  discount  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("vouchers")
}

model Notification {
  id               Int                @id @default(autoincrement())
  content          String?
  product          Product            @relation(fields: [productId], references: [id])
  productId        Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  userNotification UserNotification[]

  @@map("notifications")
}

model UserNotification {
  id             Int          @id @default(autoincrement())
  userId         Int
  productId      Int
  notificationId Int
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  product        Product      @relation(fields: [productId], references: [id])

  @@map("user_notification")
}

model UserSeen {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  lastSeen DateTime @default(now())
  userId   Int

  @@map("user_seen")
}
